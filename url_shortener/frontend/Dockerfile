FROM node:16-alpine AS build
WORKDIR /app

#Install the dependencies
COPY package.json package-lock.json ./
RUN npm ci

#Copy the application code
COPY . .

#Set the Production Environment and Build
ENV REACT_APP_API_BASE_URL=http://api:5000
RUN npm run build

#Nginx Production Stage
FROM nginx:alpine

#The nginx:alpine image is used to serve the static files (HTML, CSS, JS, etc.) generated by the npm run build command in the first stage.
#In the first stage (FROM node:16-alpine AS build), the React app is built.
#In the second stage (FROM nginx:alpine), the built files are copied from the first stage and served using Nginx.

# Copy built assets from the build stage
COPY  --from=build /app/build /usr/share/nginx/html

#Copy the custom nginx config
COPY nginx/nginx.conf /etc/nginx/conf.d/default.conf

#Add the Health Checkup
#timeout,Specifies the maximum amount of time Docker will wait for the health check command to complete.
HEALTHCHECK --interval=30s --timeout=5s --start-period=5s --retries=3 \
    CMD wget -q --spider http://localhost:80/ || exit 1
#wget:A command-line utility used to make HTTP requests.
#-q:Stands for "quiet mode",Suppresses output from wget unless there is an error.
#--spider:Tells wget to check if the URL is reachable without downloading the content.It essentially "pings" the URL to see if it responds.

#Expose the PORT
# Declares that the container will listen on port 80 at runtime
EXPOSE 80 

#Start the Nginx Server
#The CMD instruction in a Dockerfile specifies the default command that will be executed when a container is started from the image.
CMD ["nginx", "-g", "daemon off;"]
#-g "daemon off;":This tells Nginx to run in the foreground, which is required for Docker containers.
#If this is not specified, Nginx will run in the background and the container will exit immediately after starting.

#-g:This flag allows you to pass global configuration directives to Nginx directly from the command line.